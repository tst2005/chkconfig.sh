#!/bin/sh

##--------------------------------------------------------
#   -- chkconfig.sh - A chkconfig clone in POSIX shell  --
#   -- Copyright (c) 2014-2015 TsT worldmaster.fr       --
##--------------------------------------------------------

# TOSEE: apt-cache show sysv-rc-conf

# TODO:
# - coder la partie list : inetd et xinetd

set -e

errorexit() {
	echo >&2 "$1" ; exit ${2:-1};
}

# die() { printf "$1"; exit 1; }
# lc() { printf %s "$1" | tr 'A-Z' 'a-z'; }
Return() { printf %s\\n "$1"; }
# printf_STDERR() { printf >&2 "$@"; }

to_d() {
	case "$1" in
	'0') Return 'rc0.d' ;;
	'1') Return 'rc1.d' ;;
	'2') Return 'rc2.d' ;;
	'3') Return 'rc3.d' ;;
	'4') Return 'rc4.d' ;;
	'5') Return 'rc5.d' ;;
	'6') Return 'rc6.d' ;;
	'S') Return 'rcS.d' ;;
	'B') Return 'boot.d' ;;
	esac
}

__list_target_rcN() {
	local d="$1";shift
	local t="$1";shift
	if [ -d "$d" ]; then
		find "$d" -type l -name '*'"$t" \
		| (
		while read dir_file; do
			[ "$(dirname "$dir_file")" != "$d" ] && continue
			local name0="$(basename "$dir_file")"

			local act="$(printf %.1c "$name0")"
			[ "$act" != "S" ] && continue

			local name1="${name0#[SK][0-9][0-9]}"
			[ "$name1" != "$t" ] && continue

			if [ -f "${rootdir:-/}${initdir:-etc/init.d}/$name1" ]; then
				return 0
			fi
		done
		return 1
		)
		return $?
	fi
	return 1
}

__known_rc() {
	local target="$1"; shift
	for l in 0 1 2 3 4 5 6 B S; do
		local sd="$(to_d $l)"
		local d="${rootdir:-/}etc/$sd"
		[ ! -d "$d" ] && continue
		if [ -f "${rootdir:-/}${initdir:-etc/init.d}/$target" ] || find "$d" -type l -name '[KS][0-9][0-9]'"$target" |grep -q ''; then
			return 0
		fi
	done
	return 1
}

__list_target() {

	local target="$1"; shift

	if ! __known_rc "$target"; then
		echo >&2 "$target: unknown service"
		# unless $known_all{$s};
		return 1
	fi

	printf "%-24s" "$target"
	for l in "$@"; do
		local sd="$(to_d $l)"
		local d="${rootdir:-/}etc/$sd"
		[ ! -d "$d" ] && continue
		if $usecolor; then
			if __list_target_rcN "$d" "$target" "$l"; then
				printf '\033[32;01m%s\033[0m' "  $l:on "
			elif [ "$l" != "S" ]; then
				printf %s "  $l:off"
			fi
		else
			if __list_target_rcN "$d" "$target" "$l"; then
				printf %s "  $l:on "
			elif [ "$l" != "S" ]; then
				printf %s "  $l:off"
			fi
		fi
	done
	#if ${printdeps}; then
	#	printf '\t' + print getdeps_rc($s)
	#fi
	printf '\n'
}

__list_targets() {

	for target in "$@"; do
		case "$target" in
			README) continue ;;
			.*) continue ;;
		esac

		__list_target "$target" 0 1 2 3 4 5 B S || true
	done
}

__list_all() {
	__list_targets $(__listinitdname)
}

__listinitdname() {
	{
		find "${rootdir:-/}etc/init.d/" -type f -print
		find "${rootdir:-/}etc/init.d/" -type l -print
	} | sort -u \
	| while read -r d_f; do
		basename "$d_f"
	done
}

usage() {
	echo 'usage:'
	echo '        chkconfig -A|--allservices              (together with -l: show all services)'
#	echo '        chkconfig -t|--terse [names]            (shows the links)'
#	echo '        chkconfig -e|--edit  [names]            (configure services)'
#	echo '        chkconfig -s|--set   [name state]...    (configure services)'
	echo '        chkconfig -l|--list [--deps] [names]    (shows the links)'
#	echo '        chkconfig -c|--check name [state]       (check state)'
#	echo '        chkconfig -a|--add   [names]            (runs insserv)'
#	echo '        chkconfig -d|--del   [names]            (runs insserv -r)'
	echo '        chkconfig -h|--help                     (print usage)'
	echo '        chkconfig -f|--force ...                (call insserv with -f)'
	echo ''
#	echo '        chkconfig [name]             same as chkconfig -t'
	echo '        chkconfig name state...      same as chkconfig -s name state'
	echo '        chkconfig --root=<root> ...  use <root> as the root file system'
}

needhelp() {
	while [ $# -gt 0 ]; do
		case "$1" in
			-h|--help) usage; exit 0 ;;
			--) break ;;
		esac
		shift
	done
}
needhelp "$@"


rootdir='/'

usecolor=true
[ -t 1 ] || usecolor=false

force=""

initdir='etc/init.d'
# inetddir='etc/inetd.d' ;# not used yet
# xinetddir='etc/xinetd.d' ;# not used yet

setrootdir() {
	rootdir="${1%/}"
	rootdir="${rootdir}/"
}


SHOWDEPS=false
ALLSERVICES=false
DO_LIST=false
NOACTION=true

if [ $# -eq 0 ]; then
	ALLSERVICES=true ;# default action is --allservices
else

	while [ $# -gt 0 ]; do
		case "$1" in
			-f|--force)
				force=-f
			;;
			--root)
				shift; setrootdir "$1"
			;;
			--root=*)
				setrootdir "${1#*=}"
			;;
			-A|--allservices)
				if [ "${DO_LIST:-false}" = "false" ]; then
					NOACTION=false
					ALLSERVICES=true
				fi
			;;
			-l|--list)
				ALLSERVICES=false
				NOACTION=false
				DO_LIST=true
			;;
			--deps)
				SHOWDEPS=true ;# only used with --list, is not a action.
			;;
			-*)
				echo >&2 "Unknown option $1"
				#usage
				exit 1
			;;
			*) break
		esac
		shift
	done

	if [ "${NOACTION}" = "true" ]; then
		ALLSERVICES=true
	fi
fi

if $DO_LIST; then
	if [ $# -eq 0 ]; then
		# with ou without SHOWDEPS
		__list_all; exit $?
	else
		# with ou without SHOWDEPS
		__list_targets "$@"; exit $?
	fi
fi



check_for_change() {
	UPDATERC="$(command -v update-rc.d)" || errorexit "No such update-rc.d"
	local INSSERV="$(command -v insserv)" || errorexit "No such inssert"
}

service_on() {
	local UPDATERC
	check_for_change
	"$UPDATERC" ${force:+-f} "$1" enable >/dev/null 2>&1 || echo "Fail to enable '$1'."
}
service_off() {
	local UPDATERC
	check_for_change
	"$UPDATERC" ${force:+-f} "$1" disable >/dev/null 2>&1 || echo "Fail to disable '$1'."
}

if $NOACTION; then
	while [ $# -gt 0 ]; do
		case "$2" in
			[0-9]*) shift 2 ; continue ;;
			on)	service_on  "$1" ; shift 2 ; continue ;;
			off)	service_off "$1" ; shift 2 ; continue ;;
			*) __list_targets "$1"
		esac
		shift
	done
fi
	

#__listtarget ssh 0 1 2 3 4 5 6 S B
#__listall
exit 123

